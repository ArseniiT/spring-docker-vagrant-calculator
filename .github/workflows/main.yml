name: CI/CD Pipeline for Spring Boot

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: self-hosted
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: 17
        distribution: 'temurin'
    - name: Compile the application
      run: mvn compile
    - name: Run unit tests
      run: mvn test

  package:
    needs: build
    runs-on: self-hosted
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: 17
        distribution: 'temurin'
    - name: Package the application
      run: mvn package
      env:
        JAVA_HOME: ${{ steps.setup-java.outputs.java-home }}
    - name: Check JAR file
      run: ls -la target/
    - name: Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: app-jar
        path: target/calculator-0.0.1-SNAPSHOT.jar

  docker:
    needs: package
    runs-on: self-hosted
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Download JAR artifact
      uses: actions/download-artifact@v4
      with:
        name: app-jar
        path: target/
    - name: Check downloaded artifact
      run: ls -la target/
    - name: Build Docker image
      run: docker build -t my-spring-app:latest .
    - name: Tag and push to local insecure registry
      run: |
        docker tag my-spring-app:latest localhost:5000/my-spring-app:latest
        docker push localhost:5000/my-spring-app:latest
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Push Docker image to Docker Hub
      run: |
        docker tag my-spring-app:latest ${{ secrets.DOCKER_USERNAME }}/my-spring-app:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/my-spring-app:latest

  minikube-deploy:
    needs: docker
    runs-on: self-hosted
    steps:
    - name: Start Minikube
      run: |
        minikube start --driver=docker
    - name: Load image into Minikube
      run: |
        minikube image load localhost:5000/my-spring-app:latest
    - name: Deploy to Minikube
      run: |
        # k8s deployment
        cat <<EOF > deployment.yaml
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: my-spring-app
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: my-spring-app
          template:
            metadata:
              labels:
                app: my-spring-app
            spec:
              containers:
              - name: my-spring-app
                image: localhost:5000/my-spring-app:latest
                imagePullPolicy: Never
                ports:
                - containerPort: 8080
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: my-spring-app-service
        spec:
          selector:
            app: my-spring-app
          ports:
          - port: 80
            targetPort: 8080
          type: NodePort
        EOF
        kubectl apply -f deployment.yaml
    - name: Check deployment
      run: |
        kubectl wait --for=condition=ready pod -l app=my-spring-app --timeout=60s
        kubectl get pods -l app=my-spring-app
        kubectl get services my-spring-app-service
        minikube service my-spring-app-service --url
